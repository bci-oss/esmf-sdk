# Copyright (c) 2021 Robert Bosch Manufacturing Solutions GmbH
#
# See the AUTHORS file(s) distributed with this work for additional
# information regarding authorship.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# SPDX-License-Identifier: MPL-2.0

prefix samm: <urn:samm:org.eclipse.esmf.samm:meta-model:1.0.0#>
prefix samm-c: <urn:samm:org.eclipse.esmf.samm:characteristic:1.0.0#>
prefix samm-e: <urn:samm:org.eclipse.esmf.samm:entity:1.0.0#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <urn:samm:org.eclipse.esmf.samm:meta-model:1.0.0/boxmodel#>
prefix func: <urn:samm:org.eclipse.esmf.samm:function:2.0.0#>

# Generates edges between Trait and Constraints (constraint)
construct {
  ?edge a :Edge .
  ?edge :title "constraint" .
  ?edge :from ?from .
  ?edge :to ?to .
} where {
  ?characteristic samm-c:constraint ?constraint .
  ?characteristic samm:name ?characteristicName .

  bind( concat( ?characteristicName, "Characteristic" ) as ?characteristicBoxName )
  bind( iri( concat( func:getNamespace( ?characteristic ), ?characteristicBoxName ) ) as ?from )

  optional {
    ?constraint samm:name ?givenConstraintName .
  }

  # Calculate logical hash for constraint in case it does not have a samm:name
  # The constraint might also be defined as an anonymous node
  {
    select * where {
      ?constraint rdf:type/rdfs:subClassOf* samm:Constraint .
      filter( sameTerm( ?propertySubQueryConstraint, ?constraint ) )
      {
        select ?propertySubQueryConstraint ( group_concat( ?serializedProperty; separator=":" ) as ?constraintPropertyValues )
        where {
          select *
          where {
            ?propertySubQueryConstraint rdf:type/rdfs:subClassOf* samm:Constraint .
            ?propertySubQueryConstraint ?anyProperty ?constraintPropertyValue .
            bind( concat( str( ?anyProperty ), "=", str( ?constraintPropertyValue ) ) as ?serializedProperty )
          }
          order by str( ?serializedProperty )
        }
        group by ?propertySubQueryConstraint
      }
    }
  }

  bind( coalesce( concat( ?givenConstraintName, "Constraint" ),
                 concat( "Constraint", substr( md5( ?constraintPropertyValues ), 0, 11 ) ) ) as ?constraintBoxName )

  bind( iri( concat( func:getNamespace( ?constraint ), ?constraintBoxName ) ) as ?to )

  bind( iri( concat( func:getNamespace( ?characteristic ), ?characteristicBoxName, "_To_", ?constraintBoxName ) ) as ?edge )
}

