# Copyright (c) 2021 Robert Bosch Manufacturing Solutions GmbH
#
# See the AUTHORS file(s) distributed with this work for additional
# information regarding authorship.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# SPDX-License-Identifier: MPL-2.0

prefix samm: <urn:samm:org.eclipse.esmf.samm:meta-model:2.0.0#>
prefix samm-e: <urn:samm:org.eclipse.esmf.samm:entity:2.0.0#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <urn:samm:org.eclipse.esmf.samm:meta-model:2.0.0/boxmodel#>
prefix func: <urn:samm:org.eclipse.esmf.samm:function:2.0.0#>

# Generates boxes for Properties
construct {
  ?propertyBox a :Box .
  ?propertyBox :prototype "AbstractProperty" .
  ?propertyBox :title ?propertyName .
  ?propertyBox :modelElement ?property .
  ?propertyBox :entries (
     [
       a :Entry ;
       :title "preferredName" ;
       :text ?preferredName
     ]
     [
       a :Entry ;
       :title "description" ;
       :text ?description
     ]
     [
       a :Entry ;
       :title "see" ;
       :text ?seeValues
     ]
  )
} where {
  #process Properties defined in the Aspect Model being processed
  {
    ?property rdf:type samm:AbstractProperty .
    bind( strafter( str( ?property ), "#" ) as ?propertyName ) .

    bind( concat( ?propertyName, "AbstractProperty" ) as ?boxName )
    bind( iri( concat( func:getNamespace( ?property ), ?boxName ) ) as ?propertyBox )

    optional {
      ?property samm:preferredName ?preferredNameValue .
      filter( lang( ?preferredNameValue ) = "en" )
      bind( xsd:string( ?preferredNameValue ) as ?preferredName )
    }

    optional {
      ?property samm:description ?descriptionValue .
      filter( lang( ?descriptionValue ) = "en" )
      bind( xsd:string( ?descriptionValue ) as ?description )
    }

    #subquery which concatenates all values for the samm:see attributes
    optional {
      select * where {
        ?property rdf:type samm:Property .
        filter( str( ?subQueryProperty ) = str( ?property ) )
        {
          select ?subQueryProperty ( group_concat( ?seeValue; separator=", " ) as ?seeValues )
          where {
            select *
            where {
              ?subQueryProperty rdf:type samm:Property .
              ?subQueryProperty samm:see ?seeValue .
            }
            order by str( ?seeValue )
          }
          group by ?subQueryProperty
        }
      }
    }
  }
}
