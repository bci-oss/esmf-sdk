# Copyright (c) 2023 Robert Bosch Manufacturing Solutions GmbH
#
# See the AUTHORS file(s) distributed with this work for additional
# information regarding authorship.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# SPDX-License-Identifier: MPL-2.0

prefix samm: <urn:samm:org.eclipse.esmf.samm:meta-model:2.1.0#>
prefix samm-e: <urn:samm:org.eclipse.esmf.samm:entity:2.1.0#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <urn:samm:org.eclipse.esmf.samm:meta-model:2.1.0/boxmodel#>
prefix func: <urn:samm:org.eclipse.esmf.samm:function:2.0.0#>

# Generates edges between Aspects or Entities or Abstract Entities and Properties
construct {
  ?edge a :Edge .
  ?edge :title ?title .
  ?edge :from ?from .
  ?edge :to ?to .
} where {
  # Aspect/Entity/Abstract Entity -> Property Edges (properties)
  ?aspectOrEntityOrAbstractEntity rdf:type ?class .
  filter( ?class in ( samm:Aspect, samm:Entity, samm:AbstractEntity ) )

  bind( strafter( str( ?aspectOrEntityOrAbstractEntity ), "#" ) as ?aspectOrEntityOrAbstractEntityName ) .

  ?property rdf:type ?propertyClass .
  filter( ?propertyClass in ( samm:Property, samm:AbstractProperty ) )

  bind( strafter( str( ?property ), "#" ) as ?propertyName ) .
  filter( exists { ?aspectOrEntityOrAbstractEntity samm:properties/rdf:rest*/rdf:first/samm:property? ?property } )

  bind( str( ?class ) as ?fullClassName )
  bind( strafter( ?fullClassName, "#" ) as ?typeName )
  bind( concat( ?aspectOrEntityOrAbstractEntityName, ?typeName ) as ?aspectOrEntityOrAbstractEntityBoxName )
  bind( iri( concat( func:getNamespace( ?aspectOrEntityOrAbstractEntity ), ?aspectOrEntityOrAbstractEntityBoxName ) ) as ?from )

  bind( if( exists { ?property a samm:AbstractProperty }, "AbstractProperty", "Property" ) as ?propertyClassName )
  bind( concat( ?propertyName, ?propertyClassName ) as ?propertyBoxName )
  bind( iri( concat( func:getNamespace( ?property ), ?propertyBoxName ) ) as ?to )

  bind( iri( concat( func:getNamespace( ?aspectOrEntityOrAbstractEntity ), ?aspectOrEntityOrAbstractEntityBoxName, "_To_", ?propertyBoxName ) ) as ?edge )

  optional {
    ?aspectOrEntityOrAbstractEntity samm:properties/rdf:rest*/rdf:first ?propertyNode .
    ?propertyNode samm:property ?property .
    ?propertyNode samm:optional true .
    ?propertyNode samm:payloadName ?payloadName
    bind( concat( "property (optional) (", str( ?payloadName ), ")" ) as ?title )
  }

  optional {
    ?aspectOrEntityOrAbstractEntity samm:properties/rdf:rest*/rdf:first ?propertyNode .
    ?propertyNode samm:property ?property .
    ?propertyNode samm:optional true .
    bind( "property (optional)" as ?title )
  }

  optional {
    ?aspectOrEntityOrAbstractEntity samm:properties/rdf:rest*/rdf:first ?propertyNode .
    ?propertyNode samm:property ?property .
    ?propertyNode samm:notInPayload true .
    bind( "property (not in payload)" as ?title )
  }

  optional {
    ?aspectOrEntityOrAbstractEntity samm:properties/rdf:rest*/rdf:first ?propertyNode .
    ?propertyNode samm:property ?property .
    ?propertyNode samm:payloadName ?payloadName
    bind( concat( "property (", str( ?payloadName ), ")" ) as ?title )
  }

  optional {
     ?aspectOrEntityOrAbstractEntity samm:properties/rdf:rest*/rdf:first ?propertyNode .
     bind( "property" as ?title )
  }
}
