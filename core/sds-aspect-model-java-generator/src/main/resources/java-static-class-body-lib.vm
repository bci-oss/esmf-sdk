#**
 ~ Copyright (c) 2021 Robert Bosch Manufacturing Solutions GmbH
 ~
 ~ See the AUTHORS file(s) distributed with this work for additional
 ~ information regarding authorship.
 ~
 ~ This Source Code Form is subject to the terms of the Mozilla Public
 ~ License, v. 2.0. If a copy of the MPL was not distributed with this
 ~ file, You can obtain one at https://mozilla.org/MPL/2.0/.
 ~
 ~ SPDX-License-Identifier: MPL-2.0
 *#
#parse( "java-static-class-property-lib.vm" )

#macro( javaStaticClassBody )
$codeGenerationConfig.getImportTracker().importExplicit( "${codeGenerationConfig.getPackageName()}.${element.getName()}" )
/**
* Generated class {@link Meta${element.getName()}}.
*/
public class Meta${element.getName()} implements StaticMetaClass<${element.getName()}>, PropertyContainer {
public static final String NAMESPACE = "${modelUrnPrefix}";
public static final String MODEL_ELEMENT_URN = NAMESPACE + "${element.getName()}";

private static String CHARACTERISTIC_NAMESPACE = "${characteristicBaseUrn}";

#propertyDeclaration() Meta${element.getName()} INSTANCE = new Meta${element.getName()}();

#if( $util.isXmlDatatypeFactoryRequired( $element ) )
    $codeGenerationConfig.getImportTracker().importExplicit( $DatatypeConfigurationException )
    $codeGenerationConfig.getImportTracker().importExplicit( $DatatypeConstants )
    $codeGenerationConfig.getImportTracker().importExplicit( $DatatypeFactory )
private static DatatypeFactory _datatypeFactory;

static {
   try {
      _datatypeFactory = DatatypeFactory.newInstance();
   } catch ( DatatypeConfigurationException exception ) {
      throw new RuntimeException( exception );
   }
}
#end

#foreach( $property in $deconstructor.getAllProperties() )
    #javaStaticClassProperty( $property $codeGenerationConfig )
#end
#foreach( $property in $element.getProperties() )
    #if ( !$property.isAbstract() )
        #javaStaticClassProperty( $property $codeGenerationConfig )
    #end
#end

    public Class<${element.getName()}> getModelClass() {
        return ${element.getName()}.class;
    }

    @Override
    public AspectModelUrn getAspectModelUrn() {
       return AspectModelUrn.fromUrn( MODEL_ELEMENT_URN );
    }

    @Override
    public KnownVersion getMetaModelVersion() {
        return KnownVersion.${element.getMetaModelVersion().toString()};
    }

    @Override
    public String getName() {
        return "${element.getName()}";
    }

    @Override
    public List<StaticProperty<?>> getProperties() {
       return Arrays.asList(
        ${util.staticPropertiesExpression( $element )}
       );
    }

    @Override
    public List<StaticProperty<?>> getAllProperties() {
        #if( $element.getExtends().isPresent() )
            #set( $extendedElement = $element.getExtends().get() )
            $codeGenerationConfig.getImportTracker().importExplicit( "${codeGenerationConfig.getPackageName()}.Meta${extendedElement.getName()}" )
            List<StaticProperty<?>> properties = getProperties();
            properties.addAll(Meta${extendedElement.getName()}.INSTANCE.getAllProperties());
            return properties;
        #else
            return getProperties();
        #end
    }

#if( !$element.getPreferredNames().isEmpty() )
    $codeGenerationConfig.getImportTracker().importExplicit( $LangString )
    $codeGenerationConfig.getImportTracker().importExplicit( $HashSet )
    $codeGenerationConfig.getImportTracker().importExplicit( $Locale )
    @Override
    public java.util.Set<LangString> getPreferredNames() {
       return new HashSet<>() {{
          #foreach( $langString in $element.getPreferredNames() )
          add( new LangString( "$StringEscapeUtils.escapeJava( $langString.getValue() )", Locale.forLanguageTag( "$langString.getLanguageTag().toLanguageTag()" ) ) );
          #end
       }};
    }
#end

#if( !$element.descriptions.isEmpty() )
    $codeGenerationConfig.getImportTracker().importExplicit( $LangString )
    $codeGenerationConfig.getImportTracker().importExplicit( $HashSet )
    $codeGenerationConfig.getImportTracker().importExplicit( $Locale )
    @Override
    public java.util.Set<LangString> getDescriptions() {
       return new HashSet<>() {{
       #foreach( $langString in $element.getDescriptions() )
       add( new LangString( "$StringEscapeUtils.escapeJava( $langString.getValue() )", Locale.forLanguageTag( "$langString.getLanguageTag().toLanguageTag()" ) ) );
       #end
       }};
    }
#end

#if( !$element.getSee().isEmpty() )
    @Override
    public List<String> getSee() {
       return Arrays.asList(
        #foreach( $see in $element.getSee() )
            $util.createLiteral( $see )
            #if( $foreach.hasNext ), #end
        #end
       );
    }
#end

}
#end
